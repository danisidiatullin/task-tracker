# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs

orbs:
  python: circleci/python@2.1.1

jobs:
  build-and-test:
    executor:
      name: python/default
      tag: '3.9'
    # Specify the execution environment. You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # See: https://circleci.com/docs/2.0/configuration-reference/#docker-machine-macos-windows-executor
    #docker:
    #  - image: cimg/base:stable
    # Add steps to the job
    # See: https://circleci.com/docs/2.0/configuration-reference/#steps
    #description: The official CircleCI CIMG Python Docker image.
    #docker:
    #  - image: 'cimg/python:<< parameters.tag >>'
    #parameters:
    #  tag:
    #    default: '3.9'
    #    description: The `cimg/python` Docker image version tag.
    #    type: string
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Install Docker Compose
          environment:
            COMPOSE_VERSION: '1.29.2'
          command: |
            curl -L "https://github.com/docker/compose/releases/download/${COMPOSE_VERSION}/docker-compose-$(uname -s)-$(uname -m)" -o ~/docker-compose
            chmod +x ~/docker-compose
            sudo mv ~/docker-compose /usr/local/bin/docker-compose
      - run:
          name: install dockerize
          command: wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && sudo tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
          environment:
              DOCKERIZE_VERSION: v0.3.0
      - run:
          name: Setup Virtual Env
          command: |
            virtualenv -p python3.9 env
            echo "source ./env/bin/activate" >> $BASH_ENV
      - run:
          name: Install Dependencies
          command: pip install -r requirements.txt
      - run:
          name: Start Postgres
          command: | 
            docker compose up --build postgres -d
            docker compose up --build postgres-test -d
      #- run:
      #    name: Wait for db
      #    command: dockerize -wait tcp://localhost:5433 -timeout 2m
      - run:
          name: Test
          command: pytest



# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  build-test-and-deploy:
    jobs:
      - build-and-test:
          filters:
            branches:
              only:
                circleci-project-setup
